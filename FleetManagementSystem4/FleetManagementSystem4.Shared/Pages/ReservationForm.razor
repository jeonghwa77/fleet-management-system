@using FleetManagementSystem4.Shared.Models
@inject IJSRuntime JSRuntime

<!-- 성공 메시지 -->
@if (ShowSuccess)
{
    <div class="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-center">
        <span class="text-green-600 mr-2">✓</span>
        <span class="text-green-800">예약이 성공적으로 완료되었습니다! 예약 관리에서 확인하실 수 있습니다.</span>
    </div>
}

<!-- 에러 메시지 -->
@if (!string.IsNullOrEmpty(Error))
{
    <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center">
        <span class="text-red-600 mr-2">⚠</span>
        <span class="text-red-800">@Error</span>
    </div>
}

<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <div class="mb-6">
        <h2 class="text-xl font-bold text-gray-900 mb-2">차량 예약 신청</h2>
        <p class="text-gray-600">법인차량 사용을 위해 예약을 신청해주세요. 신청 즉시 예약이 완료됩니다.</p>
    </div>

    <EditForm Model="this" FormName="reservation-form" OnValidSubmit="HandleSubmit">
        <div class="space-y-6">
            <!-- 신청자 정보 -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">신청자 성명</label>
                    <div class="w-full px-3 py-2 border border-gray-200 rounded-lg bg-gray-50 text-gray-700">
                        @(CurrentUser?.Name ?? "로그인 정보 없음")
                    </div>
                </div>

                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">소속 부서</label>
                    <div class="w-full px-3 py-2 border border-gray-200 rounded-lg bg-gray-50 text-gray-700">
                        @(CurrentUser?.Department ?? "부서 정보 없음")
                    </div>
                </div>
            </div>

            <!-- 사용 기간 및 시간 -->
            <div class="space-y-6">
                <div class="flex items-center justify-between">
                    <label class="text-base font-medium text-gray-700">사용 기간 및 시간 *</label>
                    <button type="button" @onclick="HandleAllDayClick" disabled="@IsSubmitting"
                            class="px-3 py-1 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center">
                        <span class="mr-1">🕒</span>
                        종일
                    </button>
                </div>

                <!-- 시작일시 -->
                <div class="space-y-3">
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <label class="font-medium text-blue-700">사용 시작</label>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="start-date" class="text-sm text-gray-600">날짜</label>
                            <input type="date" @bind="StartDateValue" @bind:format="yyyy-MM-dd" id="start-date"
                                   min="@TodayString" required disabled="@IsSubmitting"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div class="space-y-2">
                            <label for="start-time" class="text-sm text-gray-600">시간</label>
                            <select @bind="StartTime" @bind:after="OnDateTimeChanged" id="start-time"
                                    required disabled="@IsSubmitting"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                <option value="">시간 선택</option>
                                <option value="00:00">00:00</option>
                                @foreach (var time in TimeSlots)
                                {
                                    <option value="@time">@time</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <!-- 종료일시 -->
                <div class="space-y-3">
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-red-500 rounded-full"></div>
                        <label class="font-medium text-red-700">사용 종료</label>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="end-date" class="text-sm text-gray-600">날짜</label>
                            <input type="date" @bind="EndDateValue" @bind:format="yyyy-MM-dd" id="end-date"
                                   min="@(StartDate ?? TodayString)" required disabled="@IsSubmitting"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div class="space-y-2">
                            <label for="end-time" class="text-sm text-gray-600">시간</label>
                            <select @bind="EndTime" @bind:after="OnDateTimeChanged" id="end-time"
                                    required disabled="@IsSubmitting"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                <option value="">시간 선택</option>
                                @foreach (var time in TimeSlots)
                                {
                                    <option value="@time">@time</option>
                                }
                                <option value="23:59">23:59</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- 기간 요약 -->
                @if (!string.IsNullOrEmpty(StartDate) && !string.IsNullOrEmpty(EndDate) && 
                     !string.IsNullOrEmpty(StartTime) && !string.IsNullOrEmpty(EndTime))
                {
                    <div class="p-3 bg-gray-50 rounded-lg">
                        <p class="text-sm">
                            <span class="font-medium">선택된 사용 기간:</span><br />
                            <span class="text-blue-600">
                                @if (StartDate == EndDate)
                                {
                                    @($"{StartDate} {StartTime} ~ {EndTime}")
                                }
                                else
                                {
                                    @($"{StartDate} {StartTime} ~ {EndDate} {EndTime}")
                                }
                            </span>
                        </p>
                    </div>
                }
            </div>

            <!-- 차량 선택 -->
            <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">차량 선택 *</label>
                @if (!string.IsNullOrEmpty(StartDate) && !string.IsNullOrEmpty(EndDate))
                {
                    <select @bind="SelectedVehicleId" required disabled="@(IsSubmitting || AvailableVehicles.Count == 0)"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        @if (AvailableVehicles.Count > 0)
                        {
                            <option value="">@($"{AvailableVehicles.Count}대의 차량 선택 가능")</option>
                            @foreach (var vehicle in AvailableVehicles)
                            {
                                <option value="@vehicle.Id">
                                    @vehicle.Name (@vehicle.LicensePlate) - @vehicle.Type
                                    @if (vehicle.Status != "사용 가능") { @($"[{vehicle.Status}]") }
                                </option>
                            }
                        }
                        else
                        {
                            <option value="">선택한 시간에 사용 가능한 차량이 없습니다</option>
                        }
                    </select>
                    
                    @if (AvailableVehicles.Count == 0)
                    {
                        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                            <p class="text-sm text-gray-600">
                                선택하신 시간에는 사용 가능한 차량이 없습니다. 다른 시간대를 선택해보세요.
                            </p>
                            @if (!string.IsNullOrEmpty(StartDate) && !string.IsNullOrEmpty(EndDate))
                            {
                                <div class="mt-2">
                                    <p class="text-xs text-gray-500 font-medium">예약 충돌 상황:</p>
                                    @foreach (var vehicle in GetUnavailableVehicles())
                                    {
                                        <div class="text-xs text-gray-600 mt-1">
                                            • @vehicle.Name (@vehicle.LicensePlate): @GetVehicleUnavailableReason(vehicle.Id)
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-sm text-gray-600">
                            @if (StartDate == EndDate)
                            {
                                @($"{StartDate} {StartTime}-{EndTime}")
                            }
                            else
                            {
                                @($"{StartDate} {StartTime} ~ {EndDate} {EndTime}")
                            } 시간대에 
                            <span class="text-green-600 font-medium">@($"{AvailableVehicles.Count}대")</span>의 차량을 사용하실 수 있습니다.
                        </p>
                    }
                }
                else
                {
                    <select disabled class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100">
                        <option>먼저 사용 날짜와 시간을 선택해주세요</option>
                    </select>
                    <p class="text-sm text-gray-600">
                        사용 날짜와 시간을 입력하면 해당 시간에 사용 가능한 차량을 확인할 수 있습니다.
                    </p>
                }
            </div>

            <!-- 사용 목적 -->
            <div class="space-y-2">
                <label for="purpose" class="block text-sm font-medium text-gray-700">사용 목적 *</label>
                <textarea @bind="Purpose" rows="3" required disabled="@IsSubmitting" id="purpose"
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="차량 사용 목적을 상세히 작성해주세요"></textarea>
            </div>

            <button type="submit" disabled="@(IsSubmitting || AvailableVehicles.Count == 0 || 
                    string.IsNullOrEmpty(StartDate) || string.IsNullOrEmpty(EndDate) || 
                    string.IsNullOrEmpty(StartTime) || string.IsNullOrEmpty(EndTime))"
                    class="w-full px-4 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed">
                @if (IsSubmitting)
                {
                    <span class="flex items-center justify-center">
                        <span class="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></span>
                        예약 중...
                    </span>
                }
                else
                {
                    <span>예약 신청하기</span>
                }
            </button>
        </div>
    </EditForm>
</div>

<!-- 커스텀 알림 모달 -->
@if (showAlertModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-[60]" @onclick="CloseAlertModal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" @onclick:stopPropagation="true">
            <div class="mt-3 text-center">
                <!-- 아이콘 -->
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full mb-4
                    @(alertType == "success" ? "bg-green-100" : 
                      alertType == "error" ? "bg-red-100" : 
                      alertType == "warning" ? "bg-yellow-100" : "bg-blue-100")">
                    <span class="text-2xl">
                        @(alertType == "success" ? "✅" : 
                          alertType == "error" ? "❌" : 
                          alertType == "warning" ? "⚠️" : "ℹ️")
                    </span>
                </div>
                
                <!-- 제목 -->
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-2">
                    @(alertType == "success" ? "성공" : 
                      alertType == "error" ? "오류" : 
                      alertType == "warning" ? "경고" : "알림")
                </h3>
                
                <!-- 메시지 -->
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500">@alertMessage</p>
                </div>
                
                <!-- 버튼 -->
                <div class="items-center px-4 py-3">
                    <button @onclick="CloseAlertModal" 
                            class="px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        확인
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<Vehicle> Vehicles { get; set; } = new();
    [Parameter] public List<Reservation> ExistingReservations { get; set; } = new();
    [Parameter] public User? CurrentUser { get; set; }
    [Parameter] public EventCallback<Reservation> OnSubmit { get; set; }

    private string TodayString => DateTime.Today.ToString("yyyy-MM-dd");
    private bool IsSubmitting { get; set; } = false;
    private bool ShowSuccess { get; set; } = false;
    private string? Error { get; set; }

    // 커스텀 알림 모달 관련 변수
    private bool showAlertModal = false;
    private string alertMessage = "";
    private string alertType = "info"; // success, error, warning, info

    // 폼 데이터
    private string EmployeeName { get; set; } = "";
    private string Department { get; set; } = "";
    private string Purpose { get; set; } = "";
    private string? StartDate { get; set; }
    private string? EndDate { get; set; }
    private string? StartTime { get; set; } = "09:00";
    private string? EndTime { get; set; } = "18:00";
    private string SelectedVehicleId { get; set; } = "";

    // Helper properties for HTML date inputs
    private DateTime? StartDateValue
    {
        get => DateTime.TryParse(StartDate, out var date) ? date : null;
        set 
        { 
            StartDate = value?.ToString("yyyy-MM-dd");
            _ = OnDateTimeChanged(); // Fire and forget async call
        }
    }

    private DateTime? EndDateValue
    {
        get => DateTime.TryParse(EndDate, out var date) ? date : null;
        set 
        { 
            EndDate = value?.ToString("yyyy-MM-dd");
            _ = OnDateTimeChanged(); // Fire and forget async call
        }
    }

    private List<string> Departments = new() 
    { 
        "프로젝트 1팀", "프로젝트 2팀", "연구개발팀", "경영지원팀", "기타" 
    };

    private List<string> TimeSlots = new()
    {
        "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30",
        "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30",
        "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30"
    };

    private List<Vehicle> AvailableVehicles { get; set; } = new();

    protected override void OnInitialized()
    {
        // 로그인 사용자 정보로 기본값 설정
        if (CurrentUser != null)
        {
            EmployeeName = CurrentUser.Name ?? "";
            Department = CurrentUser.Department ?? "";
        }

        // 오늘 날짜로 기본값 설정
        StartDate = TodayString;
        EndDate = TodayString;

        // 가용 차량 초기 필터링
        FilterAvailableVehicles();
    }

    private void HandleAllDayClick()
    {
        StartTime = "00:00";
        EndTime = "23:59";
        OnDateTimeChanged();
    }

    private async Task OnDateTimeChanged(ChangeEventArgs e)
    {
        // 종료 날짜가 시작 날짜보다 이전인 경우 시작 날짜와 같게 수정
        if (!string.IsNullOrEmpty(StartDate) && !string.IsNullOrEmpty(EndDate) && 
            string.Compare(EndDate, StartDate) < 0)
        {
            EndDate = StartDate;
        }

        FilterAvailableVehicles();
        StateHasChanged();
    }

    private async Task OnDateTimeChanged()
    {
        await OnDateTimeChanged(new ChangeEventArgs());
    }

    private void FilterAvailableVehicles()
    {
        // 정비 중이 아닌 모든 차량을 대상으로 함
        var baseAvailable = Vehicles.Where(v => v.Status != "정비 중").ToList();

        // 날짜가 입력된 경우 충돌 검사 수행 (시간이 없으면 기본값 사용)
        if (string.IsNullOrEmpty(StartDate) || string.IsNullOrEmpty(EndDate))
        {
            AvailableVehicles = baseAvailable;
            StateHasChanged();
            return;
        }

        // 시간이 입력되지 않은 경우 기본값 사용
        var checkStartTime = string.IsNullOrEmpty(StartTime) ? "09:00" : StartTime;
        var checkEndTime = string.IsNullOrEmpty(EndTime) ? "18:00" : EndTime;

        AvailableVehicles = baseAvailable.Where(vehicle => 
            !IsTimeConflict(vehicle.Id, StartDate, EndDate, checkStartTime, checkEndTime)
        ).ToList();

        // 가용한 차량이 있을 때 첫 번째 차량을 자동 선택
        if (AvailableVehicles.Count > 0 && string.IsNullOrEmpty(SelectedVehicleId))
        {
            SelectedVehicleId = AvailableVehicles[0].Id;
        }
        else if (AvailableVehicles.Count == 0)
        {
            SelectedVehicleId = "";
        }
        else if (!string.IsNullOrEmpty(SelectedVehicleId) && 
                 !AvailableVehicles.Any(v => v.Id == SelectedVehicleId))
        {
            // 현재 선택된 차량이 가용 목록에 없으면 첫 번째 차량으로 변경
            SelectedVehicleId = AvailableVehicles.FirstOrDefault()?.Id ?? "";
        }

        StateHasChanged();
    }

    private List<Vehicle> GetUnavailableVehicles()
    {
        if (string.IsNullOrEmpty(StartDate) || string.IsNullOrEmpty(EndDate))
            return new List<Vehicle>();

        var checkStartTime = string.IsNullOrEmpty(StartTime) ? "09:00" : StartTime;
        var checkEndTime = string.IsNullOrEmpty(EndTime) ? "18:00" : EndTime;

        return Vehicles.Where(v => 
            !AvailableVehicles.Contains(v) && 
            v.Status != "정비 중"
        ).ToList();
    }

    private string GetVehicleUnavailableReason(string vehicleId)
    {
        if (string.IsNullOrEmpty(StartDate) || string.IsNullOrEmpty(EndDate))
            return "";

        var checkStartTime = string.IsNullOrEmpty(StartTime) ? "09:00" : StartTime;
        var checkEndTime = string.IsNullOrEmpty(EndTime) ? "18:00" : EndTime;

        var conflictingReservations = ExistingReservations.Where(r => 
            r.VehicleId == vehicleId && 
            (r.GetCurrentStatus() == "reserved" || r.GetCurrentStatus() == "in_use") &&
            IsTimeConflict(vehicleId, StartDate, EndDate, checkStartTime, checkEndTime)
        ).ToList();

        if (conflictingReservations.Any())
        {
            var reservation = conflictingReservations.First();
            return $"{reservation.StartDate} {reservation.StartTime}-{reservation.EndTime} 예약됨";
        }

        return "사용 불가";
    }

    private DateTime CreateDateTime(string dateStr, string timeStr)
    {
        return DateTime.Parse($"{dateStr}T{timeStr}:00");
    }

    private bool IsTimeConflict(string vehicleId, string checkStartDate, string checkEndDate, 
                               string checkStartTime, string checkEndTime)
    {
        var activeReservations = ExistingReservations.Where(reservation => 
            reservation.VehicleId == vehicleId && 
            (reservation.GetCurrentStatus() == "reserved" || reservation.GetCurrentStatus() == "in_use")
        ).ToList();

        // 새 예약의 시작/종료 일시
        var newStart = CreateDateTime(checkStartDate, checkStartTime);
        var newEnd = CreateDateTime(checkEndDate, checkEndTime);

        return activeReservations.Any(reservation => {
            // 기존 예약의 시작/종료 일시
            var existingStart = CreateDateTime(reservation.StartDate, reservation.StartTime);
            var existingEnd = CreateDateTime(reservation.EndDate, reservation.EndTime);

            // 시간 겹침 검사: 새 예약의 시작이 기존 예약 종료보다 이르고,
            // 새 예약의 종료가 기존 예약 시작보다 늦은 경우
            return newStart < existingEnd && newEnd > existingStart;
        });
    }

    private async Task HandleSubmit()
    {
        Error = null;

        // 필수 입력 검증
        if (string.IsNullOrEmpty(SelectedVehicleId) || CurrentUser == null || 
            string.IsNullOrEmpty(CurrentUser.Name) || string.IsNullOrEmpty(CurrentUser.Department) || 
            string.IsNullOrEmpty(Purpose) || string.IsNullOrEmpty(StartDate) || string.IsNullOrEmpty(EndDate) || 
            string.IsNullOrEmpty(StartTime) || string.IsNullOrEmpty(EndTime))
        {
            Error = "모든 필드를 입력해주세요.";
            return;
        }

        var vehicle = Vehicles.FirstOrDefault(v => v.Id == SelectedVehicleId);
        if (vehicle == null)
        {
            Error = "선택한 차량을 찾을 수 없습니다.";
            return;
        }

        // 시간 검증
        if (string.Compare(StartTime, EndTime) >= 0)
        {
            Error = "종료 시간은 시작 시간보다 늦어야 합니다.";
            return;
        }

        // 날짜 검증
        if (string.Compare(StartDate, EndDate) > 0)
        {
            Error = "종료일은 시작일보다 늦어야 합니다.";
            return;
        }

        // 과거 날짜 검증
        if (string.Compare(StartDate, TodayString) < 0)
        {
            Error = "시작일은 오늘 이후여야 합니다.";
            return;
        }

        // 시간 충돌 검사
        if (IsTimeConflict(SelectedVehicleId, StartDate, EndDate, StartTime, EndTime))
        {
            Error = "선택한 시간에 해당 차량이 이미 예약되어 있습니다.";
            return;
        }

        IsSubmitting = true;

        try
        {
            var reservation = new Reservation
            {
                Id = $"reservation_{DateTime.Now.Ticks}",
                VehicleId = SelectedVehicleId,
                VehicleName = vehicle.Name,
                UserId = CurrentUser?.Id ?? "unknown",
                UserName = CurrentUser?.Name ?? "",
                Department = CurrentUser?.Department ?? "",
                Purpose = Purpose,
                StartDate = StartDate,
                EndDate = EndDate,
                StartTime = StartTime,
                EndTime = EndTime,
                Status = "reserved", // 승인 없이 바로 예약 중 상태
                CreatedAt = DateTime.Now
            };

            await OnSubmit.InvokeAsync(reservation);

            // 폼 초기화 (사용자 정보와 기본 날짜/시간은 유지)
            SelectedVehicleId = "";
            Purpose = "";

            await ShowAlert($"차량 '{vehicle.Name}'이(가) 성공적으로 예약되었습니다.", "success");
        }
        catch (Exception ex)
        {
            await ShowAlert($"예약 생성에 실패했습니다: {ex.Message}", "error");
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    // 커스텀 알림 모달 메서드들
    private async Task ShowAlert(string message, string type = "info")
    {
        alertMessage = message;
        alertType = type;
        showAlertModal = true;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private void CloseAlertModal()
    {
        showAlertModal = false;
        StateHasChanged();
    }
}

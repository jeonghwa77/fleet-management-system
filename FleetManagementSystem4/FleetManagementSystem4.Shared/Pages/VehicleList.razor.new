@page "/vehicles"
@using FleetManagementSystem4.Shared.Models

<div class="min-h-screen bg-background">
    <!-- ÏÉÅÎã® Ìó§Îçî -->
    <div class="bg-white border-b border-border">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center space-x-4">
                    <div class="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                        <span class="text-xl text-primary">üöó</span>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold text-foreground">Ï∞®Îüâ Í¥ÄÎ¶¨</h1>
                        <p class="text-sm text-muted-foreground">
                            ÌöåÏÇ¨ Ï∞®ÎüâÏùÑ Í¥ÄÎ¶¨ÌïòÍ≥† Í∞Å Ï∞®ÎüâÏùò Ï†ïÎ≥¥ÏôÄ ÏÉâÏÉÅÏùÑ ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.
                        </p>
                    </div>
                </div>
                @if (onAdd.HasDelegate)
                {
                    <button @onclick="ShowAddModal"
                            class="bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg transition-colors font-medium flex items-center space-x-2">
                        <span>‚ûï</span>
                        <span>Ï∞®Îüâ Ï∂îÍ∞Ä</span>
                    </button>
                }
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <!-- Ï∞®Îüâ Î™©Î°ù -->
        <div class="@(isMobile ? "space-y-3" : "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4")">
            @foreach (var vehicle in vehicles)
            {
                <div class="bg-card rounded-lg shadow-sm border border-border relative overflow-visible">
                    <div class="p-4 pb-3 overflow-visible">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <div class="w-4 h-4 rounded @GetVehicleColor(vehicle.Id, vehicle.Color)"
                                     title="Ï∫òÎ¶∞Îçî ÏÉâÏÉÅ: @GetColorLabel(vehicle.Color ?? GetVehicleColor(vehicle.Id, null))"></div>
                                <h3 class="text-lg font-semibold text-foreground">@vehicle.Name</h3>
                            </div>
                            @if (onUpdate.HasDelegate || onDelete.HasDelegate)
                            {
                                <div class="flex space-x-1">
                                    @if (onUpdate.HasDelegate)
                                    {
                                        <button @onclick="() => OpenEditDialog(vehicle)"
                                                class="h-8 w-8 p-0 text-muted-foreground hover:text-foreground hover:bg-muted rounded transition-colors"
                                                title="Ï∞®Îüâ Ï†ïÎ≥¥ ÏàòÏ†ï">
                                            <span class="text-sm">‚úèÔ∏è</span>
                                        </button>
                                    }
                                    @if (onDelete.HasDelegate)
                                    {
                                        <button @onclick="() => OpenDeleteDialog(vehicle)"
                                                class="h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50 rounded transition-colors"
                                                title="Ï∞®Îüâ ÏÇ≠Ï†ú">
                                            <span class="text-sm">üóëÔ∏è</span>
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    
                    <div class="px-4 pb-4">
                        <div class="space-y-3">
                            <div class="flex items-center justify-between">
                                <span class="text-sm text-muted-foreground">ÏÉÅÌÉú</span>
                                @GetStatusBadge(vehicle.Status)
                            </div>
                            
                            <div class="space-y-2 text-sm">
                                <div class="flex items-center justify-between">
                                    <span class="text-muted-foreground">Î≤àÌò∏Ìåê:</span>
                                    <span class="font-mono">@vehicle.LicensePlate</span>
                                </div>
                                
                                <div class="flex items-center justify-between">
                                    <span class="text-muted-foreground">Ï∞®Ï¢Ö:</span>
                                    <span>@vehicle.Type</span>
                                </div>
                                
                                <div class="flex items-center justify-between">
                                    <span class="text-muted-foreground">Ïó∞Î£å:</span>
                                    <div class="flex items-center space-x-1">
                                        <span>@GetFuelIcon(vehicle.Fuel)</span>
                                        <span>@vehicle.Fuel</span>
                                    </div>
                                </div>
                                
                                <div class="flex items-center justify-between">
                                    <span class="text-muted-foreground">ÏäπÏ∞®Ïù∏Ïõê:</span>
                                    <div class="flex items-center space-x-1">
                                        <span>üë•</span>
                                        <span>@vehicle.CapacityÎ™Ö</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Ï∞®Îüâ Ï∂îÍ∞Ä Î™®Îã¨ -->
@if (showAddDialog)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between p-6 border-b border-border">
                <h2 class="text-xl font-semibold text-foreground">ÏÉà Ï∞®Îüâ Ï∂îÍ∞Ä</h2>
                <button @onclick="() => showAddDialog = false"
                        class="text-muted-foreground hover:text-foreground p-2 rounded-md transition-colors">
                    ‚úï
                </button>
            </div>
            
            <form @onsubmit="HandleAddVehicle" @onsubmit:preventDefault="true" class="p-6 space-y-4">
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                        <div class="flex items-center space-x-2">
                            <span>‚ö†Ô∏è</span>
                            <span>@error</span>
                        </div>
                    </div>
                }
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ï∞®ÎüâÎ™Ö *</label>
                    <input @bind="newVehicle.Name" 
                           class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20"
                           placeholder="Ïòà: ÌòÑÎåÄ Í∑∏ÎûúÏ†Ä" />
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ï∞®Ï¢Ö *</label>
                    <select @bind="newVehicle.Type"
                            class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20">
                        <option value="">Ï∞®Ï¢Ö ÏÑ†ÌÉù</option>
                        @foreach (var type in VehicleTypes)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Î≤àÌò∏Ìåê *</label>
                    <input @bind="newVehicle.LicensePlate" 
                           class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20"
                           placeholder="Ïòà: ÏÑúÏö∏12Í∞Ä3456" />
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ïó∞Î£å ÌÉÄÏûÖ *</label>
                    <select @bind="newVehicle.Fuel"
                            class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20">
                        <option value="">Ïó∞Î£å ÏÑ†ÌÉù</option>
                        @foreach (var fuel in FuelTypes)
                        {
                            <option value="@fuel">@fuel</option>
                        }
                    </select>
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">ÏäπÏ∞®Ïù∏Ïõê</label>
                    <input @bind="newVehicle.Capacity" type="number" min="1" max="50"
                           class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20" />
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">ÏÉÅÌÉú</label>
                    <select @bind="newVehicle.Status"
                            class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20">
                        <option value="Available">Ïö¥Ìñâ Í∞ÄÎä•</option>
                        <option value="InUse">Ïö¥Ìñâ Ï§ë</option>
                        <option value="Maintenance">Ï†ïÎπÑ Ï§ë</option>
                        <option value="OutOfService">Ïö¥Ìñâ Î∂àÍ∞Ä</option>
                    </select>
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ï∫òÎ¶∞Îçî ÏÉâÏÉÅ</label>
                    <div class="grid grid-cols-6 gap-2">
                        @foreach (var color in DefaultColors)
                        {
                            <button type="button" @onclick="() => newVehicle.Color = color.Value"
                                    class="w-8 h-8 rounded border-2 @(newVehicle.Color == color.Value ? "border-gray-900" : "border-gray-300") @color.Value"
                                    title="@color.Label">
                            </button>
                        }
                    </div>
                </div>
                
                <div class="flex justify-end space-x-2 pt-4 border-t border-border">
                    <button type="button" @onclick="() => showAddDialog = false"
                            class="bg-secondary hover:bg-secondary/80 text-secondary-foreground px-4 py-2 rounded-lg transition-colors font-medium">
                        Ï∑®ÏÜå
                    </button>
                    <button type="submit" disabled="@isSubmitting"
                            class="bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg transition-colors font-medium disabled:opacity-50">
                        @if (isSubmitting)
                        {
                            <span>Ï∂îÍ∞Ä Ï§ë...</span>
                        }
                        else
                        {
                            <span>Ï∂îÍ∞Ä</span>
                        }
                    </button>
                </div>
            </form>
        </div>
    </div>
}

<!-- Ï∞®Îüâ ÏàòÏ†ï Î™®Îã¨ -->
@if (showEditDialog && selectedVehicle != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between p-6 border-b border-border">
                <h2 class="text-xl font-semibold text-foreground">Ï∞®Îüâ Ï†ïÎ≥¥ ÏàòÏ†ï</h2>
                <button @onclick="() => showEditDialog = false"
                        class="text-muted-foreground hover:text-foreground p-2 rounded-md transition-colors">
                    ‚úï
                </button>
            </div>
            
            <form @onsubmit="HandleUpdateVehicle" @onsubmit:preventDefault="true" class="p-6 space-y-4">
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                        <div class="flex items-center space-x-2">
                            <span>‚ö†Ô∏è</span>
                            <span>@error</span>
                        </div>
                    </div>
                }
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ï∞®ÎüâÎ™Ö *</label>
                    <input @bind="editVehicle.Name" 
                           class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20"
                           placeholder="Ïòà: ÌòÑÎåÄ Í∑∏ÎûúÏ†Ä" />
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ï∞®Ï¢Ö *</label>
                    <select @bind="editVehicle.Type"
                            class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20">
                        <option value="">Ï∞®Ï¢Ö ÏÑ†ÌÉù</option>
                        @foreach (var type in VehicleTypes)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Î≤àÌò∏Ìåê *</label>
                    <input @bind="editVehicle.LicensePlate" 
                           class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20"
                           placeholder="Ïòà: ÏÑúÏö∏12Í∞Ä3456" />
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ïó∞Î£å ÌÉÄÏûÖ *</label>
                    <select @bind="editVehicle.Fuel"
                            class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20">
                        <option value="">Ïó∞Î£å ÏÑ†ÌÉù</option>
                        @foreach (var fuel in FuelTypes)
                        {
                            <option value="@fuel">@fuel</option>
                        }
                    </select>
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">ÏäπÏ∞®Ïù∏Ïõê</label>
                    <input @bind="editVehicle.Capacity" type="number" min="1" max="50"
                           class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20" />
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">ÏÉÅÌÉú</label>
                    <select @bind="editVehicle.Status"
                            class="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary/20">
                        <option value="Available">Ïö¥Ìñâ Í∞ÄÎä•</option>
                        <option value="InUse">Ïö¥Ìñâ Ï§ë</option>
                        <option value="Maintenance">Ï†ïÎπÑ Ï§ë</option>
                        <option value="OutOfService">Ïö¥Ìñâ Î∂àÍ∞Ä</option>
                    </select>
                </div>
                
                <div>
                    <label class="text-sm font-medium text-foreground mb-2 block">Ï∫òÎ¶∞Îçî ÏÉâÏÉÅ</label>
                    <div class="grid grid-cols-6 gap-2">
                        @foreach (var color in DefaultColors)
                        {
                            <button type="button" @onclick="() => editVehicle.Color = color.Value"
                                    class="w-8 h-8 rounded border-2 @(editVehicle.Color == color.Value ? "border-gray-900" : "border-gray-300") @color.Value"
                                    title="@color.Label">
                            </button>
                        }
                    </div>
                </div>
                
                <div class="flex justify-end space-x-2 pt-4 border-t border-border">
                    <button type="button" @onclick="() => showEditDialog = false"
                            class="bg-secondary hover:bg-secondary/80 text-secondary-foreground px-4 py-2 rounded-lg transition-colors font-medium">
                        Ï∑®ÏÜå
                    </button>
                    <button type="submit" disabled="@isSubmitting"
                            class="bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg transition-colors font-medium disabled:opacity-50">
                        @if (isSubmitting)
                        {
                            <span>ÏàòÏ†ï Ï§ë...</span>
                        }
                        else
                        {
                            <span>ÏàòÏ†ï</span>
                        }
                    </button>
                </div>
            </form>
        </div>
    </div>
}

<!-- Ï∞®Îüâ ÏÇ≠Ï†ú ÌôïÏù∏ Î™®Îã¨ -->
@if (showDeleteDialog && selectedVehicle != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="p-6">
                <div class="flex items-center space-x-3 mb-4">
                    <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                        <span class="text-2xl text-red-600">‚ö†Ô∏è</span>
                    </div>
                    <div>
                        <h2 class="text-xl font-semibold text-foreground">Ï∞®Îüâ ÏÇ≠Ï†ú</h2>
                        <p class="text-sm text-muted-foreground">Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                </div>
                
                <p class="text-foreground mb-6">
                    Ï†ïÎßêÎ°ú '<strong>@selectedVehicle.Name</strong>' Ï∞®ÎüâÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
                </p>
                
                <div class="flex justify-end space-x-2">
                    <button @onclick="() => showDeleteDialog = false"
                            class="bg-secondary hover:bg-secondary/80 text-secondary-foreground px-4 py-2 rounded-lg transition-colors font-medium">
                        Ï∑®ÏÜå
                    </button>
                    <button @onclick="HandleDeleteVehicle" disabled="@isSubmitting"
                            class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors font-medium disabled:opacity-50">
                        @if (isSubmitting)
                        {
                            <span>ÏÇ≠Ï†ú Ï§ë...</span>
                        }
                        else
                        {
                            <span>ÏÇ≠Ï†ú</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public List<Vehicle> vehicles { get; set; } = new();
    [Parameter] public bool isMobile { get; set; } = false;
    [Parameter] public EventCallback onRefresh { get; set; }
    [Parameter] public EventCallback<Vehicle> onAdd { get; set; }
    [Parameter] public EventCallback<(string id, Vehicle updates)> onUpdate { get; set; }
    [Parameter] public EventCallback<string> onDelete { get; set; }

    private bool showAddDialog = false;
    private bool showEditDialog = false;
    private bool showDeleteDialog = false;
    private Vehicle? selectedVehicle = null;
    private bool isSubmitting = false;
    private string? error = null;

    // ÏÉà Ï∞®Îüâ Ï∂îÍ∞Ä Ìèº
    private Vehicle newVehicle = new()
    {
        Name = "",
        Type = "",
        LicensePlate = "",
        Fuel = "",
        Capacity = 4,
        Status = "Available",
        Color = "bg-blue-500"
    };

    // Ï∞®Îüâ ÏàòÏ†ï Ìèº
    private Vehicle editVehicle = new()
    {
        Name = "",
        Type = "",
        LicensePlate = "",
        Fuel = "",
        Capacity = 4,
        Status = "Available",
        Color = "bg-blue-500"
    };

    private readonly List<(string Value, string Label)> DefaultColors = new()
    {
        ("bg-blue-500", "ÌååÎûÄÏÉâ"),
        ("bg-green-500", "Ï¥àÎ°ùÏÉâ"),
        ("bg-yellow-500", "ÎÖ∏ÎûÄÏÉâ"),
        ("bg-purple-500", "Î≥¥ÎùºÏÉâ"),
        ("bg-pink-500", "Î∂ÑÌôçÏÉâ"),
        ("bg-indigo-500", "ÎÇ®ÏÉâ"),
        ("bg-red-500", "Îπ®Í∞ÑÏÉâ"),
        ("bg-orange-500", "Ï£ºÌô©ÏÉâ"),
        ("bg-teal-500", "Ï≤≠Î°ùÏÉâ"),
        ("bg-cyan-500", "ÌïòÎäòÏÉâ"),
        ("bg-lime-500", "ÎùºÏûÑÏÉâ"),
        ("bg-emerald-500", "ÏóêÎ©îÎûÑÎìúÏÉâ")
    };

    private readonly string[] VehicleTypes = { "ÏäπÏö©Ï∞®", "SUV", "ÏäπÌï©Ï∞®", "Ìä∏Îü≠", "Î≤ÑÏä§", "Í∏∞ÌÉÄ" };
    private readonly string[] FuelTypes = { "ÌúòÎ∞úÏú†", "Í≤ΩÏú†", "ÌïòÏù¥Î∏åÎ¶¨Îìú", "Ï†ÑÍ∏∞", "LPG" };

    private string GetVehicleColor(string vehicleId, string? customColor)
    {
        if (!string.IsNullOrEmpty(customColor)) return customColor;
        
        var hash = 0;
        foreach (char c in vehicleId)
        {
            hash = (int)c + ((hash << 5) - hash);
        }
        var index = Math.Abs(hash) % DefaultColors.Count;
        return DefaultColors[index].Value;
    }

    private string GetColorLabel(string colorValue)
    {
        var color = DefaultColors.FirstOrDefault(c => c.Value == colorValue);
        return color.Label ?? "Í∏∞Î≥∏ÏÉâ";
    }

    private RenderFragment GetStatusBadge(string status)
    {
        var (text, className) = status switch
        {
            "Available" => ("Ïö¥Ìñâ Í∞ÄÎä•", "bg-green-100 text-green-800"),
            "InUse" => ("Ïö¥Ìñâ Ï§ë", "bg-blue-100 text-blue-800"),
            "Maintenance" => ("Ï†ïÎπÑ Ï§ë", "bg-orange-100 text-orange-800"),
            "OutOfService" => ("Ïö¥Ìñâ Î∂àÍ∞Ä", "bg-red-100 text-red-800"),
            _ => ("Ïïå Ïàò ÏóÜÏùå", "bg-gray-100 text-gray-800")
        };

        return @<span class="px-2 py-1 rounded-full text-xs font-medium @className">@text</span>;
    }

    private string GetFuelIcon(string fuelType)
    {
        return fuelType switch
        {
            "ÌúòÎ∞úÏú†" => "‚õΩ",
            "Í≤ΩÏú†" => "üõ¢Ô∏è",
            "ÌïòÏù¥Î∏åÎ¶¨Îìú" => "üîã",
            "Ï†ÑÍ∏∞" => "‚ö°",
            "LPG" => "üí®",
            _ => "‚õΩ"
        };
    }

    private void ShowAddModal()
    {
        newVehicle = new Vehicle
        {
            Name = "",
            Type = "",
            LicensePlate = "",
            Fuel = "",
            Capacity = 4,
            Status = "Available",
            Color = DefaultColors[0].Value
        };
        showAddDialog = true;
        error = null;
    }

    private void OpenEditDialog(Vehicle vehicle)
    {
        selectedVehicle = vehicle;
        editVehicle = new Vehicle
        {
            Id = vehicle.Id,
            Name = vehicle.Name,
            Type = vehicle.Type,
            LicensePlate = vehicle.LicensePlate,
            Fuel = vehicle.Fuel,
            Capacity = vehicle.Capacity,
            Status = vehicle.Status,
            Color = vehicle.Color ?? GetVehicleColor(vehicle.Id, null),
            Year = vehicle.Year,
            Mileage = vehicle.Mileage,
            LastMaintenance = vehicle.LastMaintenance,
            NextMaintenance = vehicle.NextMaintenance,
            InsuranceExpiry = vehicle.InsuranceExpiry
        };
        showEditDialog = true;
        error = null;
    }

    private void OpenDeleteDialog(Vehicle vehicle)
    {
        selectedVehicle = vehicle;
        showDeleteDialog = true;
        error = null;
    }

    private async Task HandleAddVehicle()
    {
        if (string.IsNullOrEmpty(newVehicle.Name) || string.IsNullOrEmpty(newVehicle.Type) || 
            string.IsNullOrEmpty(newVehicle.LicensePlate) || string.IsNullOrEmpty(newVehicle.Fuel))
        {
            error = "Î™®Îì† ÌïÑÏàò Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";
            return;
        }

        isSubmitting = true;
        error = null;

        try
        {
            if (onAdd.HasDelegate)
            {
                await onAdd.InvokeAsync(newVehicle);
                showAddDialog = false;
                ShowAddModal(); // Ìèº Î¶¨ÏÖã
            }
        }
        catch (Exception ex)
        {
            error = $"Ï∞®Îüâ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleUpdateVehicle()
    {
        if (string.IsNullOrEmpty(editVehicle.Name) || string.IsNullOrEmpty(editVehicle.Type) || 
            string.IsNullOrEmpty(editVehicle.LicensePlate) || string.IsNullOrEmpty(editVehicle.Fuel))
        {
            error = "Î™®Îì† ÌïÑÏàò Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.";
            return;
        }

        if (selectedVehicle == null) return;

        isSubmitting = true;
        error = null;

        try
        {
            if (onUpdate.HasDelegate)
            {
                await onUpdate.InvokeAsync((selectedVehicle.Id, editVehicle));
                showEditDialog = false;
                selectedVehicle = null;
            }
        }
        catch (Exception ex)
        {
            error = $"Ï∞®Îüâ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleDeleteVehicle()
    {
        if (selectedVehicle == null) return;

        isSubmitting = true;
        error = null;

        try
        {
            if (onDelete.HasDelegate)
            {
                await onDelete.InvokeAsync(selectedVehicle.Id);
                showDeleteDialog = false;
                selectedVehicle = null;
            }
        }
        catch (Exception ex)
        {
            error = $"Ï∞®Îüâ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
